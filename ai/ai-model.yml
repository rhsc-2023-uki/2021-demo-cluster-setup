apiVersion: template.openshift.io/v1
kind: Template

labels:
  application: demo-2021-ai

metadata:
  name: demo-2021-ai

parameters:
  - name: APPLICATION_NAME
    value: demo-2021-ai
  - name: CONFIG_MAP_NAME
    value: 2021-demo-common
  - name: REPLICAS
    value: "2"
  - name: IMAGE_REPOSITORY
    value: quay.io/uksummit2023/2023-ai:latest
  - name: CONTAINER_REQUEST_CPU
    value: 250m
  - name: CONTAINER_REQUEST_MEMORY
    value: 512Mi
  - name: CONTAINER_LIMIT_CPU
    value: 500m
  - name: CONTAINER_LIMIT_MEMORY
    value: 1024Mi

objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          containers:
            - env:
                - name: PORT
                  value: "${PORT}"
              envFrom:
                - configMapRef:
                    name: ${CONFIG_MAP_NAME}
              image: ${IMAGE_REPOSITORY}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              resources:
                requests:
                  cpu: ${CONTAINER_REQUEST_CPU}
                  memory: ${CONTAINER_REQUEST_MEMORY}
                limits:
                  cpu: ${CONTAINER_LIMIT_CPU}
                  memory: ${CONTAINER_LIMIT_MEMORY}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${APPLICATION_NAME}

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${APPLICATION_NAME}
