apiVersion: template.openshift.io/v1
kind: Template

labels:
  application: game-server

metadata:
  name: game-server

parameters:
  - name: APPLICATION_NAME
    required: true
  - name: SECRET_NAME
    value: 2021-demo-common
    required: true
  - name: CONFIG_MAP_NAME
    value: 2021-demo-common
    required: true
  - name: HTTP_PORT
    value: '8080'
    required: true
  - name: IMAGE_REPOSITORY
    value: quay.io/redhatdemo/2021-game-server:latest
    required: true
  - name: CONTAINER_REQUEST_CPU
    value: 1000m
  - name: CONTAINER_REQUEST_MEMORY
    value: 1024Mi
  - name: CONTAINER_LIMIT_CPU
    value: 1000m
  - name: CONTAINER_LIMIT_MEMORY
    value: 1024Mi
  - name: ROLLOUT_STRATEGY
    value: "Rolling"
    required: true
  - name: AWS_ACCESS_KEY_ID
    value: ""
  - name: AWS_SECRET_ACCESS_KEY
    value: ""
  - name: NAMESPACE
    required: true


objects:
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app.openshift.io/runtime: nodejs
        app: ${APPLICATION_NAME}
    spec:
      serviceName: ${APPLICATION_NAME}
      replicas: 3
      selector:
        matchLabels:
          app: ${APPLICATION_NAME}
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          terminationGracePeriodSeconds: 10
          containers:
            - resources:
                requests:
                  cpu: ${CONTAINER_REQUEST_CPU}
                  memory: ${CONTAINER_REQUEST_MEMORY}
                limits:
                  cpu: ${CONTAINER_LIMIT_CPU}
                  memory: ${CONTAINER_LIMIT_MEMORY}
              terminationMessagePath: /dev/termination-log
              name: ${APPLICATION_NAME}
              env:
                - name: NAMESPACE
                  value: ${NAMESPACE}
                - name: AWS_ACCESS_KEY_ID
                  value: ${AWS_ACCESS_KEY_ID}
                - name: AWS_SECRET_ACCESS_KEY
                  value: ${AWS_SECRET_ACCESS_KEY}
                - name: AI_AGENT_SERVER_URL
                  value: http://ai-agent-server.ai.svc.cluster.local:8080/agent
              ports:
                - name: web
                  containerPort: 8080
                  protocol: TCP
              imagePullPolicy: Always
              terminationMessagePolicy: File
              envFrom:
                - configMapRef:
                    name: 2021-demo-common
                - secretRef:
                    name: 2021-demo-common
              image: ${IMAGE_REPOSITORY}
          restartPolicy: Always
          terminationGracePeriodSeconds: 10
          dnsPolicy: ClusterFirst
          securityContext: {}
      podManagementPolicy: OrderedReady
      updateStrategy:
        type: RollingUpdate
        rollingUpdate:
          partition: 0
      revisionHistoryLimit: 10

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}-0
      labels:
        app: ${APPLICATION_NAME}-0
    spec:
      ports:
        - protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        statefulset.kubernetes.io/pod-name: ${APPLICATION_NAME}-0

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}-1
      labels:
        app: ${APPLICATION_NAME}-1
    spec:
      ports:
        - protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        statefulset.kubernetes.io/pod-name: ${APPLICATION_NAME}-1

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}-2
      labels:
        app: ${APPLICATION_NAME}-2
    spec:
      ports:
        - protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        statefulset.kubernetes.io/pod-name: ${APPLICATION_NAME}-2

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}-3
      labels:
        app: ${APPLICATION_NAME}-3
    spec:
      ports:
        - protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        statefulset.kubernetes.io/pod-name: ${APPLICATION_NAME}-3
  
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      port:
        targetPort: ${HTTP_PORT}
      to:
        kind: Service
        name: ${APPLICATION_NAME}-0
        weight: 34
      alternateBackends:
        - kind: Service
          name: ${APPLICATION_NAME}-1
          weight: 33
        - kind: Service
          name: ${APPLICATION_NAME}-2
          weight: 33
